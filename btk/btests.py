
from numpy import random
from typing import Iterable, Container
from numbers import Complex, Number

class Testd:

    def __init__(self):

        self.t_integers = {
            -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,
            -127, -128, -129, 127, 128, 129,
            -255, -256, -257, 255, 256, 257,
            -32767, -32768, -32769, 32767, 32768, 32769,
            -65535, -65536, -65537, 65535, 65536, 65537,
            -2147483647, -2147483648, -2147483649, 2147483647, 2147483648, 2147483649,
            -4294967294, -4294967295, -4294967296, 4294967294, 4294967295, 4294967296,
            -9223372036854775807, -9223372036854775808, -9223372036854775809, 9223372036854775807, 9223372036854775808, 9223372036854775809,
            -18446744073709551614, -18446744073709551615, -18446744073709551616, 18446744073709551614, 18446744073709551615, 18446744073709551616,
            13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095,
            -13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095
        }
        self.t_floats = {
                1.414213562373095048801688724209, 1.618033988749894848204586834365, 1.732050807568877293527446341505, 2.718281828459045235360287471352, 3.141592653589793238462643383279,
                1.000000000000001, 2.000000000000001, 3.000000000000001, 4.000000000000001, 5.000000000000001, -5.000000000000001, -4.000000000000001, -3.000000000000001, -2.000000000000001, -1.000000000000001,
                0.000000000000001, 0.000000000000011, 0.000000000000111, 0.000000000001111, 0.000000000011111, 0.000000000111111, 0.000000001111111, 0.000000011111111, 0.000000111111111, 0.000001111111111, 0.000011111111111, 0.000111111111111, 0.001111111111111, 0.011111111111111, 0.111111111111111,
                0.0, 0.000000000000001, 0.999999999999999, -5.0, -4.0, -3.0, -2.0, -1.0, 5.0, 4.0, 3.0, 2.0, 1.0, 
                -0.000000000000001, -0.000000000000011, -0.000000000000111, -0.000000000001111, -0.000000000011111, -0.000000000111111, -0.000000001111111, -0.000000011111111, -0.000000111111111, -0.000001111111111, -0.000011111111111, -0.000111111111111, -0.001111111111111, -0.011111111111111, -0.111111111111111,
                1.999999999999999, 2.999999999999999, 3.999999999999999, 4.999999999999999, 5.999999999999999, -5.999999999999999, -4.999999999999999, -3.999999999999999, -2.999999999999999, -1.999999999999999,
                -127.0, -128.0, -129.0, 127.0, 128.0, 129.0, -255.0, -256.0, -257.0, 255.0, 256.0, 257.0, -32767.0, -32768.0, -32769.0, 32767.0, 32768.0, 32769.0, -65535.0, -65536.0, -65537.0, 65535.0, 65536.0, 65537.0
                -2147483647.0, -2147483648.0, -2147483649.0, 2147483647.0, 2147483648.0, 2147483649.0, -4294967294.0, -4294967295.0, -4294967296.0, 4294967294.0, 4294967295.0, 4294967296.0
                -9223372036854775807.0, -9223372036854775808.0, -9223372036854775809.0, 9223372036854775807.0, 9223372036854775808.0, 9223372036854775809.0,
                -18446744073709551614.0, -18446744073709551615.0, -18446744073709551616.0, 18446744073709551614.0, 18446744073709551615.0, 18446744073709551616.0,
                -127.000000000000001, -128.000000000000001, -129.000000000000001, 127.000000000000001, 128.000000000000001, 129.000000000000001,
                -255.000000000000001, -256.000000000000001, -257.000000000000001, 255.000000000000001, 256.000000000000001, 257.000000000000001,
                -32767.000000000000001, -32768.000000000000001, -32769.000000000000001, 32767.000000000000001, 32768.000000000000001, 32769.000000000000001,
                -65535.000000000000001, -65536.000000000000001, -65537.000000000000001, 65535.000000000000001, 65536.000000000000001, 65537.000000000000001,
                -2147483647.000000000000001, -2147483648.000000000000001, -2147483649.000000000000001, 2147483647.000000000000001, 2147483648.000000000000001, 2147483649.000000000000001,
                -4294967294.000000000000001, -4294967295.000000000000001, -4294967296.000000000000001, 4294967294.000000000000001, 4294967295.000000000000001, 4294967296.000000000000001,
                -9223372036854775807.000000000000001, -9223372036854775808.000000000000001, -9223372036854775809.000000000000001, 9223372036854775807.000000000000001, 9223372036854775808.000000000000001, 9223372036854775809.000000000000001,
                -18446744073709551614.000000000000001, -18446744073709551615.000000000000001, -18446744073709551616.000000000000001, 18446744073709551614.000000000000001, 18446744073709551615.000000000000001, 18446744073709551616.000000000000001,
                -127.999999999999999, -128.999999999999999, -129.999999999999999, 127.999999999999999, 128.999999999999999, 129.999999999999999,
                -255.999999999999999, -256.999999999999999, -257.999999999999999, 255.999999999999999, 256.999999999999999, 257.999999999999999,
                -32767.999999999999999, -32768.999999999999999, -32769.999999999999999, 32767.999999999999999, 32768.999999999999999, 32769.999999999999999,
                -65535.999999999999999, -65536.999999999999999, -65537.999999999999999, 65535.999999999999999, 65536.999999999999999, 65537.999999999999999,
                -2147483647.999999999999999, -2147483648.999999999999999, -2147483649.999999999999999, 2147483647.999999999999999, 2147483648.999999999999999, 2147483649.999999999999999,
                -4294967294.999999999999999, -4294967295.999999999999999, -4294967296.999999999999999, 4294967294.999999999999999, 4294967295.999999999999999, 4294967296.999999999999999,
                -9223372036854775807.999999999999999, -9223372036854775808.999999999999999, -9223372036854775809.999999999999999, 9223372036854775807.999999999999999, 9223372036854775808.999999999999999, 9223372036854775809.999999999999999,
                -18446744073709551614.999999999999999, -18446744073709551615.999999999999999, -18446744073709551616.999999999999999, 18446744073709551614.999999999999999, 18446744073709551615.999999999999999, 18446744073709551616.999999999999999,
                13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.0,
                -13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.0,
                13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.999999999999999,
                -13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.999999999999999,
                13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.000000000000001,
                -13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095.000000000000001
        }
        self.t_strings = {
            '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '_', '-', '+', '=', 
            '"', "'", ',', '.', '<', '>', '?', '/', '\\', ':', ';', '|', '~', '`',
            '', ' ', 'ùìê', 'ùò¢', '""', '\n', '\t', "''", '\r', '\r\n',
            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
        }

        self.rng = random.default_rng()

    def tfdata(self, dtype: type, flist: Container[str]) -> set:
        """
        Retrieve a list of test variables for input by specifying a data type and keyword filters.

        Args:
            dtype (type): Data type to be returned. [Number, float, int, str]
            flist (Container[str]): List of filter keywords. ['pos', 'neg', 'small', 'large', 'alpha', 'numeric', 'alnum', 'punct']

        Returns:
            _type_: Filtered data variables
        """
        if dtype not in (Number, int, str, float): raise KeyError(f'Invalid data type specified. {dtype} not in [Number, float, int, str]')
        if dtype == Number: active = {*self.t_floats.copy(), *self.t_integers.copy()}
        elif dtype == int: active = self.t_integers.copy()
        elif dtype == float: active = self.t_floats.copy()
        elif dtype == str: active = self.t_strings.copy()
        if isinstance(flist, str): flist = [flist]
        while flist:
            ftype = flist.pop()
            match ftype:
                case 'pos': 
                    active = set(x for x in active if x >= 0)
                case 'neg': 
                    active = set(x for x in active if x <= 0)
                case 'small': 
                    active = set(x for x in active if abs(x) < 100000)
                case 'large': 
                    active = set(x for x in active if abs(x) > 100000)
                case 'alpha':
                    active = set(x for x in active if all(y.isalpha() and y not in ('ùìê', 'ùò¢') for y in x))
                case 'numeric':
                    active = set(x for x in active if all(y.isnumeric() for y in x))
                case 'alnum':
                    active = set(x for x in active if all(y.isalnum() and y not in ('ùìê', 'ùò¢') for y in x))
                case 'punct':
                    active = set(x for x in active if all(not y.isalnum() for y in x))
                case _:
                    print(f'"{ftype}" invalid filter')
        return active

    def srecombinator(self, sin: set[str], n: int, lmax: int=16, spaces: bool=True) -> set[str]:
        """
        Recombine a set of strings in various ways.

        Args:
            sin (set[str]): Input string set
            n (int): Number of strings desired
            lmax (int, optional): Maximum length of randomized strings. Defaults to 16.
            spaces (bool, optional): Whether to include spaces in output strings. Defaults to True.

        Returns:
            set[str]: set of unique strings
        """
        out = {' ', ''}
        if not spaces: top = 8
        else: top = 16
        sin = list(sin)

        while len(out) < n:
            w = self.rng.choice(sin)
            while len(w) <= lmax:
                sel = self.rng.integers(0, top)
                match sel:
                    case 0:
                        break
                    case (1|2|3|4|5):
                        for s in range(sel):
                            w = self.rng.choice([f'{w}{self.rng.choice(sin)}', f'{self.rng.choice(sin)}{w}'])
                    case (6|7):
                        if len(w) > 1:
                            ri = self.rng.integers(0, len(w)-1)
                            w = self.rng.choice([f'{w[:ri]}{self.rng.choice(sin)}{w[ri:]}', f'{w[ri:]}{self.rng.choice(sin)}{w[:ri]}'])
                    case 8:
                        w = w[::-1]
                    case 9:
                        ri = self.rng.integers(1, 3)
                        w = self.rng.choice([w[:ri], w[ri:]])
                    case (10|11):
                        if len(w) > 1:
                            ri = self.rng.integers(0, len(w)-1)
                            w = self.rng.choice([f'{w[ri:]} {w[:ri]}', f'{w[:ri]} {w[ri:]}'])
                    case (12|13|14):
                        w = self.rng.choice([f' {w}{self.rng.choice(sin)}', f'{self.rng.choice(sin)}{w} ', f'{w}{self.rng.choice(sin)} ', f' {self.rng.choice(sin)}{w}'])
                    case (15|16|17):
                        w = self.rng.choice([f'{w} {self.rng.choice(sin)}', f'{self.rng.choice(sin)} {w}'])
            out.add(w[:lmax])
            w = self.rng.choice(sin)
        return out

    def cmake(self, n: int, items: Iterable, cnum: int=1, ctype=list, nrandom: bool=False, crandom: bool=False):
        """
        Create a randomized list of containers

        Args:
            n (int): Number of items per container
            items (Iterable): Variables to place in containers
            cnum (int, optional): Number of containers to create. Defaults to 1.
            ctype (_type_, optional): Type of container to create. Can be list, tuple or set. Defaults to list.
            nrandom (bool, optional): Randomize number of items in each container up to n. Defaults to False.
            crandom (bool, optional): Randomize types of containers. Defaults to False.

        Raises:
            KeyError: Invalid Input
        Returns:
            _type_: list of containers
        """
        if not isinstance(ctype(), Container): raise KeyError(f'Invalid ctype, {ctype} not in [list, tuple, set]')
        if crandom:
            containers = [list, set, tuple]
            if not nrandom:
                return [self.rng.choice(containers)((self.rng.choice(items) for _ in range(n))) for l in range(cnum)]
            else:
                return [self.rng.choice(containers)((self.rng.choice(items) for _ in range(self.rng.integers(0, n+1)))) for l in range(cnum)]
        else:
            if not nrandom:
                return [ctype((self.rng.choice(items) for _ in range(n))) for l in range(cnum)]
            else:
                return [ctype((self.rng.choice(items) for _ in range(self.rng.integers(0, n+1)))) for l in range(cnum)]



